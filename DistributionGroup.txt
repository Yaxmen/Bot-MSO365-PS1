Param (

    [Parameter( Mandatory=$true)] [String]$Name,
    [Parameter( Mandatory=$true)] [String]$Name2, 
    [Parameter( Mandatory=$true)] [String]$Name3,
    [Parameter( Mandatory=$true)] [String]$acao,
    [Parameter( Mandatory=$false)] [String]$Email, 
    [Parameter( Mandatory=$true)] [String]$Remetente,
    [Parameter( Mandatory=$true)] [String]$Member,
    [Parameter( Mandatory=$true)] [String]$Owner,
    [Parameter( Mandatory=$true)] [String]$Entrada,
    [Parameter( Mandatory=$true)] [String]$Saida	

)

#------------------------------------------------------------------------------------------#
# Este script tem a finalidade de atender as solicitações de "Criação/Alteração/Exclusão   #
# de lista de distribuição - Outlook"                                                      #
#                                                                                          #
# Ele recebe por parametro os Nomes e Email atual da lista e o novo nome e novo email da   #
# lista e executa o seguinte:                                                              #
#   1) Verifica se a lista de distribuição existe                                          #
#   2) Verifica qual é a demanda                                                           #
#   3) Verifica se o Novo Email está disponível                                            #
#   4) Executa as alterações                                                               #
#------------------------------------------------------------------------------------------#

#$username = "SAMSAZU@petrobras.com.br"
#$msolKeyAuth = (3,4,2,3,56,34,254,222,1,1,2,23,42,54,33,233,1,34,2,7,6,5,35,43)
#$password = Get-Content "D:\Password\password.txt" -ErrorAction Stop | ConvertTo-SecureString -Key $msolKeyAuth -ErrorAction Stop
#$credential = New-Object -typename System.Management.Automation.PSCredential -argumentlist $username,$password -ErrorAction Stop

$username = "SAN3MSOFFICE@petrobrasbrteste.petrobras.com.br"
$PlainPassword="Ror66406"
$SecurePassword = $PlainPassword | ConvertTo-SecureString -AsPlainText -Force
$Credential = New-Object System.Management.Automation.PSCredential -ArgumentList $UserName, $SecurePassword

$SLEEP = 60

try {
    Connect-ExchangeOnline -Credential $credential -ShowBanner:$false -InformationAction SilentlyContinue | Out-Null 
}
catch {
    Start-Sleep $SLEEP
    try {
        Connect-ExchangeOnline -Credential $credential -InformationAction SilentlyContinue | Out-Null
    }
    catch {
        Start-Sleep $SLEEP
        try {
            Connect-ExchangeOnline -Credential $credential -InformationAction SilentlyContinue | Out-Null
        }
        catch {    
            Log "ERRO: ao conectar Exchange"
            exit 1
        }        
    }
}

# Função para criar um grupo de lista de distribuição
function CreateDistributionGroup($Members, $Name, $Owners, $DepartRestriction, $JoinRestriction, $Senders) {

        try {

            #Criando o Email
            $MailAddress = $Name + "@petrobrasbrteste.petrobras.com.br"

            # Criar Grupo
            try{
                New-DistributionGroup -Name $Name -Alias $Name -PrimarySmtpAddress $MailAddress -ErrorAction Stop | Out-Null
            } catch {
                Write-output "Erro na Criação do Grupo $Name"
            }

            # Resgatando a lista recém criada
            $DistributionGroup = Get-DistributionGroup -Identity $Name

            # Adicionando membros a lista
			foreach ($Member in $Members) {
            
                try{
                    
                    #Captura a Mailbox do membro
                    $MemberMailBox = Get-Mailbox -Identity $Member -ErrorAction Stop

                    #Insere o Membro na lista de distribuição
                    Add-DistributionGroupMember -Identity $DistributionGroup.Alias -Member $MemberMailBox.Alias | Out-Null

                }catch{
                    Write-Output "Chave $Member não localizada"
                }
					
			}

            
            #Adicionando Proprietário a Lista
            foreach ($Owner in $Owners) {

                try{
                    #Validando o Owner
                    $ValidOwner = Get-Mailbox -Identity $Owner 

                    #Adiciona o Owner a lista de Owners Válidos
                    $DistributionGroup.ManagedBy.Add($ValidOwner.Alias) | Out-Null

                }catch{
                    
                   Write-Output "Chave $Owner não localizada"
                }
					
			}
               
            # Removendo a conta de serviço da lista de aprovadores 
            $DistributionGroup.ManagedBy.Remove("9311cc06-c0fc-45ea-ab17-350da97dab0e")

            # Definindo os proprietários
            Set-DistributionGroup -Identity $DistributionGroup.Alias -ManagedBy $DistributionGroup.ManagedBy | Out-Null



            $SendersList = $DistributionGroup.AcceptMessagesOnlyFrom

            #Validando remetentes
            foreach($Sender in $Senders) {
                
                try{

                    #Validando o Sender
                    $ValidSender = Get-Mailbox -Identity $Sender

                    #Adicionando a lista de remetentes
                    $SendersList.Add($ValidSender.Alias) | Out-Null
                
                } catch {
                    
                    Write-Output ("Remetente $Sender não localizado")
                }
            
            }

            #Definindo os remetentes
            Set-DistributionGroup -Identity $DistributionGroup.Alias -AcceptMessagesOnlyFrom $SendersList | Out-Null
       
            # Definindo restrições de entrada e saída
			Set-DistributionGroup -Identity $DistributionGroup.Alias -MemberDepartRestriction $DepartRestriction -MemberJoinRestriction $JoinRestriction | Out-Null
            
            $GroupName = $DistributionGroup.DisplayName
               
            Write-Output "Sucesso na Criação do grupo $GroupName"
		
		} catch {
            write-output "Error na criação de Grupo" 
        }

        
}

# Função para adicionar membros a um grupo de lista de distribuição
function AddMembersToDistributionGroup($DistributionGroup, $Members, $Owners, $Senders) {
    
    try{
    # Capturando os membros
    $DistributionGroupMembers = Get-DistributionGroupMember -Identity $DistributionGroup.alias

    # Incluindo Membros
    foreach ($Member in $Members){

        #Captura o Usuário
        $MemberMailBox = Get-Mailbox -Identity $Member -ErrorAction SilentlyContinue

        #Verifica se o Usuário existe
        if($MemberMailBox){
            
            #Verificando se o usuário já não é membro da Lista de Distribuição
            if($DistributionGroupMembers.Name.Contains($MemberMailBox.Alias)){
                
                Write-Output "Erro: Usuário $Member já é membro da lista"

            } else {
                
                Add-DistributionGroupMember -Identity $DistributionGroup.Alias -Member $MemberMailBox.Alias | Out-Null
            }

        } else {
            Write-Output "Erro: Usuário $Member não localizado"
        }
     }

    #Loop para adicionar os Proprietário a lista
    foreach($Owner in $Owners) {
        
        try{
            #validando se a chave existe
            $OwnerBox = Get-MailBox -Identity $Owner -ErrorAction Stop

            #Verificando se o usuário já é proprietário
            if($DistributionGroup.ManagedBy.Contains($OwnerBox.Alias)){

                Write-Output "Chave já inclusa como aprovador: $Owner"

            } else {
                
                #Adiciona a chave a lista de Proprietários
                $DistributionGroup.ManagedBy.Add($OwnerBox.Alias) | Out-Null
                
            }         
        } catch {
            Write-Output "Chave não localizada $Owner"
        } 
     }

    #Atualizando a lista de proprietários na tenant
    Set-DistributionGroup -Identity $DistributionGroup.Alias -ManagedBy $DistributionGroup.ManagedBy | Out-Null
     
	#Validando remetentes
    foreach($Sender in $Senders) {
                
        try{

            #Validando o Sender
            $ValidSender = Get-Mailbox -Identity $Sender

            #Adicionando a lista de remetentes
            $DistributionGroup.AcceptMessagesOnlyFrom.Add($ValidSender.Alias) | Out-Null
                
        } catch {
                    
            Write-Output ("Remetente $Sender não localizado")
        }
            
     }

    #Definindo os remetentes
    Set-DistributionGroup -Identity $DistributionGroup.Alias -AcceptMessagesOnlyFrom $DistributionGroup.AcceptMessagesOnlyFrom | Out-Null

    #Mensagem de Sucesso
    Write-Output "Membros, Proprietários e Remetentes adicionado com sucesso!!!"

    } catch {
        
        Write-Output "Erro na adição"
    }
}

# Função para remover um grupo de lista de distribuição
function RemoveDistributionGroup($DistributionGroup) {
    
    try {

        #Remove o grupo de distribuição
        Remove-DistributionGroup -Identity $DistributionGroup.alias -Confirm:$false

        Write-Output "Sucesso na remoção da Lista de Distribuição " $DistributionGroup.DisplayName

    } catch {

        Write-Output "Grupo " + $DistributionGroup.DisplayName + " não localizado"
    }
}

# Função para remover membros de um grupo de lista de distribuição
function RemoveMembersFromDistributionGroup($DistributionGroup, $Members, $Owners, $Senders) {
    
    try{

    # Capturando os membros do grupo
    $DistributionGroupMembers = Get-DistributionGroupMember -Identity $DistributionGroup.alias

    # Removendo membros
    foreach($Member in $Members){

        try {
            
            #Validando se o membro existe
            $MemberMailBox = Get-Mailbox -Identity $Member

            #Validando se o membro está no grupo
            if($DistributionGroupMembers.Name.Contains($MemberMailBox.alias)){

                #Remover o membro
                Remove-DistributionGroupMember -Identity $DistributionGroup.alias -Member $MemberMailBox.alias | Out-Null

            } else{
                
                $GroupName = $DistributionGroup.DisplayName

                Write-Output "ERRO: Chave $Member não localizada no grupo $GroupName"
            }
        } catch {

            Write-Output "ERRO ao deletar MEMBRO: Chave $Member não localizada"
        }
    }

    # Removendo Owners
    foreach($Owner in $Owners){

        try {

            # Verificando se o usuario existe
            $OwnerMailBox = Get-Mailbox -Identity $Owner -ErrorAction Stop

            # Verificando se o usuário é um proprietário
            if($DistributionGroup.ManagedBy.Contains($OwnerMailBox.alias)){
                
                # Removendo o usuário da lista de proprietários
                $DistributionGroup.ManagedBy.Remove($OwnerMailBox.alias)
            } else {
            
                Write-Output "Erro: Usuário $Owner não localizado na lista de proprietários"
            }

        } catch {
            
            Write-Output "ERRO ao deletar OWNER: Chave $Owner não localizado"
        }
    
    }

    # Definindo os Proprietários
    Set-DistributionGroup -Identity $DistributionGroup.alias -ManagedBy $DistributionGroup.ManagedBy | Out-Null
    

    # Validando remetentes
    foreach($Sender in $Senders) {
                
        try{

            #Validando o Sender
            $ValidSender = Get-Mailbox -Identity $Sender


            # Validando se o Sender é um remetente
            if($DistributionGroup.AcceptMessagesOnlyFrom.Contains($ValidSender.Alias)){
                
                #Adicionando a lista de remetentes
                $DistributionGroup.AcceptMessagesOnlyFrom.Remove($ValidSender.Alias)
            } else {
            
                Write-Output "ERRO ao remover REMETENTE: $Sender não localizado na Lista "
            }

            
                
        } catch {
                    
             Write-Output ("Remetente $Sender não localizado")
        }
            
    }

    # Definindo os remetentes
    Set-DistributionGroup -Identity $DistributionGroup.Alias -AcceptMessagesOnlyFrom $DistributionGroup.AcceptMessagesOnlyFrom

    # Mensagem de Sucesso
    Write-Output "Sucesso na Remoção de Membros, Proprietários e Remetentes" 

    } catch {
        
        Write-Output "Erro na remoção"
    }
}


function ValidName($Name, $Name2, $Name3){


    $AvailableName = Get-DistributionGroup -Identity $Name -ErrorAction SilentlyContinue

    if(!$AvailableName){
        
        return $Name

    } elseif($AvailableName) {

        $AvailableName2 = Get-DistributionGroup -Identity $Name2 -ErrorAction SilentlyContinue

        if(!$AvailableName2) {

            return $Name2
        
        } elseif ($AvailableName2){
            
            $AvailableName3 = Get-DistributionGroup -Identity $Name3 -ErrorAction SilentlyContinue

                if(!$AvailableName3){

                    return $Name3
                
            } else {
                Write-Output "ERRO: Nenhum Nome Disponível para criação da lista"
                Exit
            }
        }
    }
}
	
function ValidJoinPermission($Entrada){

    if($Entrada -eq "Aberto"){
        return "Open"
    } elseif ($Entrada -eq "Fechado") {
        return "Closed"
    } elseif ($Entrada -eq "Aprovação"){
        return "ApprovalRequired"
    }

}

function ValidDepartPermission($Saida){

    if($Saida -eq "Aberto"){
        return "Open"
    } elseif($Saida -eq "Fechado"){
        return "Closed"
    }
}

    

    #Criar Array com Membros
    $ArrayMembros = $Member.Split(",")

    #Criar Array com Owners
    $ArrayOwners = $Owner.Split(",")

    #Criar Array com Senders
    $ArraySenders = $Remetente.Split(",")



    if($acao -eq "Criar"){
      
      #Validar o Nome
      $DistributionName = ValidName -Name $Name -Name2 $Name2 -Name3 $Name3

      #Validar JoinRestriction
      $JoinRestriction = ValidJoinPermission -Entrada $Entrada

      #Validar DepartRestriction
      $DepartRestriction = ValidDepartPermission -Saida $Saida

      CreateDistributionGroup -Members $ArrayMembros -Owners $ArrayOwners -Name $DistributionName -DepartRestriction $DepartRestriction -JoinRestriction $JoinRestriction -Senders $ArraySenders

    } else {
        
        $DistributionGroup = Get-DistributionGroup -Identity $Email -ErrorAction SilentlyContinue

        if ($DistributionGroup) { 
		    if ($acao -eq "incluir") {
        
                # Chamando função de inclusão de membros
                AddMembersToDistributionGroup -DistributionGroup $DistributionGroup -Members $ArrayMembros -Owners $ArrayOwners -Senders $ArraySenders

		    }

		    if ($acao -eq "excluir") {
            
                # Chamando Função de Exclusão de membros
                RemoveMembersFromDistributionGroup -DistributionGroup $DistributionGroup -Members $ArrayMembros -Owners $ArrayOwners -Senders $ArraySenders
		    }

		    if ($acao -eq "excluirLista") {

                # Chamando função de remoção do Grupo
                RemoveDistributionGroup -DistributionGroup $DistributionGroup
		    }
	} else {
        
        Write-Host "Erro: Lista de ditribuição $Email não localizada"
    }
}





		

